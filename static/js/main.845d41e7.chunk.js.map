{"version":3,"sources":["logo.svg","components/NavbarSuggestions.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarSuggestion","suggestion","className","onClick","navigate","route","displayName","NavbarSuggestions","routeObj","routeHierarchy","this","props","path","parentName","parent","parentObj","parentSuggestion","makeSuggestion","name","routeSuggestions","children","map","unshift","key","React","PureComponent","require","Navbar","_handleEnter","event","parsePath","state","text","_handleChange","target","value","length","setState","_handleSelect","index","selectionStart","_toggleCaret","shouldRenderCaret","navRef","current","focus","renderCaret","errorMessage","createRef","pathToParse","startsWith","slice","normalizedPath","normalize","endsWith","console","log","routes","includes","letter","prefix","suffix","textLength","calculateGradientStops","caretStart","caretEnd","tabIndex","onBlur","onFocus","ref","type","style","background","minWidth","maxWidth","onChange","onSelect","onKeyPress","Home","OtherPath","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.845d41e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { routeHierarchy } from \"../App\";\nimport \"../index.css\";\n\nfunction NavbarSuggestion({ suggestion }) {\n  return (\n    <div\n      className=\"navbar-suggestion\"\n      onClick={() => navigate(suggestion.route)}\n    >\n      <pre>{suggestion.displayName}</pre>\n    </div>\n  );\n}\n\nclass NavbarSuggestions extends React.PureComponent {\n  makeSuggestion(route, displayName = null) {\n    return {\n      displayName: displayName != null ? displayName : route,\n      route\n    };\n  }\n\n  render() {\n    const routeObj = routeHierarchy[this.props.path];\n    const parentName = routeObj.parent;\n    const parentObj = parentName != null ? routeHierarchy[parentName] : null;\n\n    const parentSuggestion =\n      parentObj != null\n        ? this.makeSuggestion(parentName, \".. (\" + parentObj.name + \")\")\n        : null;\n    const routeSuggestions = routeObj.children.map(route =>\n      this.makeSuggestion(route)\n    );\n    if (parentSuggestion != null) {\n      routeSuggestions.unshift(parentSuggestion);\n    }\n\n    return (\n      <div className=\"navbar-suggestions-wrapper\">\n        {routeSuggestions.map(suggestion => (\n          <NavbarSuggestion key={suggestion.route} suggestion={suggestion} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default NavbarSuggestions;\n","/* @flow strict-local */\nimport React from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { routes } from \"../App\";\nimport NavbarSuggestions from \"./NavbarSuggestions\";\nimport \"../index.css\";\n\nconst path = require(\"path\");\n\nclass Navbar extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorMessage: \"\",\n      index: 0,\n      text: \"\",\n      renderCaret: false\n    };\n\n    this.navRef = React.createRef();\n  }\n\n  parsePath(text) {\n    let pathToParse;\n    if (text.length === 0) {\n      return;\n    }\n\n    if (text === \"~\" || text === \"home\") {\n      pathToParse = \"/\";\n    } else if (text.startsWith(\"/\") || text.startsWith(\"~/\")) {\n      // parse as though it's the home dir\n      pathToParse = \"/\" + text.slice(1);\n    } else {\n      pathToParse = this.props.path + text;\n    }\n\n    let normalizedPath = path.normalize(pathToParse);\n    if (!normalizedPath.endsWith(\"/\")) {\n      normalizedPath = normalizedPath + \"/\";\n    }\n    console.log(normalizedPath);\n\n    if (routes.includes(normalizedPath)) {\n      if (normalizedPath !== this.props.path) {\n        navigate(normalizedPath);\n      } else {\n        this.setState({\n          index: 0,\n          text: \"\",\n          errorMessage: \"\"\n        });\n      }\n      return;\n    }\n\n    this.setState({\n      errorMessage: `cd: no such file or directory ${this.state.text}`\n    });\n  }\n\n  _handleEnter = event => {\n    if (event.key === \"Enter\") {\n      this.parsePath(this.state.text);\n    }\n  };\n\n  _handleChange = event => {\n    if (event.target.value.length > 30) {\n      return;\n    }\n    this.setState({ text: event.target.value });\n  };\n\n  _handleSelect = event => {\n    this.setState({ index: event.target.selectionStart });\n  };\n\n  _toggleCaret = shouldRenderCaret => {\n    if (shouldRenderCaret) {\n      this.navRef.current.focus();\n    }\n    this.setState({\n      renderCaret: shouldRenderCaret\n    });\n  };\n\n  updateStateText(text, index, letter) {\n    const prefix = text.slice(0, index);\n    const suffix = text.slice(index);\n\n    if (letter === \"Backspace\") {\n      return prefix.slice(0, -1) + suffix;\n    }\n    if (letter === \"Delete\") {\n      return prefix + suffix.slice(1);\n    }\n    return prefix + letter + suffix;\n  }\n\n  calculateGradientStops(text, index) {\n    const textLength = text.length + 1;\n    const caretStart = (index / textLength) * 100;\n    const caretEnd = ((index + 1) / textLength) * 100;\n    return [caretStart, caretEnd];\n  }\n\n  render() {\n    const { errorMessage, text, index, renderCaret } = this.state;\n    const [caretStart, caretEnd] = this.calculateGradientStops(text, index);\n    console.log(renderCaret, caretStart, caretEnd);\n\n    return (\n      <div className=\"navbar\">\n        <div\n          className=\"navbar-input-wrapper\"\n          tabIndex={1}\n          onBlur={() => this._toggleCaret(false)}\n          onFocus={() => this._toggleCaret(true)}\n        >\n          <pre className=\"navbar-path\">{\"~\" + this.props.path}</pre>\n          <pre> $ cd </pre>\n          <input\n            className=\"navbar-input\"\n            ref={this.navRef}\n            type=\"text\"\n            style={{\n              background: renderCaret\n                ? `linear-gradient(\n                to right, \n                #071630 0%, \n                #071630 ${caretStart}%, \n                #f569ff ${caretStart}%, \n                #f569ff ${caretEnd}%, \n                #071630 ${caretEnd}%, \n                #071630 100%\n              )`\n                : \"#071630\",\n              minWidth: (text.length + 1) * 12,\n              maxWidth: (text.length + 1) * 12\n            }}\n            value={text}\n            onChange={this._handleChange}\n            onSelect={this._handleSelect}\n            onKeyPress={this._handleEnter}\n          />\n        </div>\n        {errorMessage !== \"\" && (\n          <div className=\"navbar-error-message\">\n            <pre>{errorMessage}</pre>\n          </div>\n        )}\n        <NavbarSuggestions path={this.props.path} />\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","/* @flow strict-local */\n\nimport Navbar from \"./components/Navbar\";\nimport React from \"react\";\nimport { Router } from \"@reach/router\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst Home = () => (\n  <div className=\"App\">\n    <Navbar path=\"/\" />\n    <header className=\"App-header\">Home page under construction</header>\n  </div>\n);\n\nconst OtherPath = () => (\n  <div className=\"App\">\n    <Navbar path=\"/other/\" />\n    <header className=\"App-header\">Other page under construction too</header>\n  </div>\n);\n\nfunction App() {\n  return (\n    <Router>\n      <Home path=\"/\" />\n      <OtherPath path=\"/other/\" />\n    </Router>\n  );\n}\n\nexport default App;\nexport const routes = [\"/\", \"/other/\"];\nexport const routeHierarchy = {\n  \"/\": {\n    name: \"home\",\n    parent: null,\n    children: [\"/other/\"]\n  },\n  \"/other/\": {\n    name: \"other\",\n    parent: \"/\",\n    children: []\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}