{"version":3,"sources":["logo.svg","components/NavbarSuggestions.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarSuggestion","suggestion","className","onClick","navigate","route","displayName","NavbarSuggestions","routeObj","routeHierarchy","this","props","path","parentName","parent","parentObj","parentSuggestion","makeSuggestion","name","routeSuggestions","children","map","unshift","key","React","PureComponent","require","Navbar","_handleKeyDown","event","preventDefault","setState","prevState","index","Math","max","min","text","length","newPath","state","normalize","slice","routes","includes","errorMessage","navRef","current","blur","updateStateText","_toggleCaret","shouldRenderCaret","renderCaret","createRef","letter","prefix","suffix","textPrefix","textAtIndex","charAt","textSuffix","console","log","renderedText","tabIndex","ref","onBlur","onFocus","onKeyDown","Home","OtherPath","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0186550c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { routeHierarchy } from \"../App\";\nimport \"../index.css\";\n\nfunction NavbarSuggestion({ suggestion }) {\n  return (\n    <div\n      className=\"navbar-suggestion\"\n      onClick={() => navigate(suggestion.route)}\n    >\n      <pre>{suggestion.displayName}</pre>\n    </div>\n  );\n}\n\nclass NavbarSuggestions extends React.PureComponent {\n  makeSuggestion(route, displayName = null) {\n    return {\n      displayName: displayName != null ? displayName : route,\n      route\n    };\n  }\n\n  render() {\n    const routeObj = routeHierarchy[this.props.path];\n    const parentName = routeObj.parent;\n    const parentObj = parentName != null ? routeHierarchy[parentName] : null;\n\n    const parentSuggestion =\n      parentObj != null\n        ? this.makeSuggestion(parentName, \".. (\" + parentObj.name + \")\")\n        : null;\n    const routeSuggestions = routeObj.children.map(route =>\n      this.makeSuggestion(route)\n    );\n    if (parentSuggestion != null) {\n      routeSuggestions.unshift(parentSuggestion);\n    }\n\n    return (\n      <div className=\"navbar-suggestions-wrapper\">\n        {routeSuggestions.map(suggestion => (\n          <NavbarSuggestion key={suggestion.route} suggestion={suggestion} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default NavbarSuggestions;\n","/* @flow strict-local */\nimport React from \"react\";\nimport { navigate } from \"@reach/router\";\nimport { routes } from \"../App\";\nimport NavbarSuggestions from \"./NavbarSuggestions\";\nimport \"../index.css\";\n\nconst path = require(\"path\");\n\nclass Navbar extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errorMessage: \"\",\n      index: 0,\n      text: \"\",\n      renderCaret: false\n    };\n\n    this.navRef = React.createRef();\n  }\n\n  _handleKeyDown = event => {\n    event.preventDefault();\n    const key = event.key;\n    switch (key) {\n      case \"ArrowLeft\":\n        this.setState(prevState => {\n          return {\n            index: Math.max(0, prevState.index - 1)\n          };\n        });\n        break;\n      case \"ArrowRight\":\n        this.setState(prevState => {\n          return {\n            index: Math.min(prevState.text.length, prevState.index + 1)\n          };\n        });\n        break;\n      case \"ArrowUp\":\n        this.setState(prevState => {\n          return {\n            index: 0\n          };\n        });\n        break;\n      case \"ArrowDown\":\n        this.setState(prevState => {\n          return {\n            index: prevState.text.length\n          };\n        });\n        break;\n      case \"Enter\":\n        let newPath;\n        const { text } = this.state;\n\n        if (text[0] === \"/\" || text[0] === \"~\") {\n          newPath = path.normalize(\"/\" + text.slice(1));\n        } else {\n          newPath = path.normalize(this.props.path + text);\n        }\n\n        if (newPath[newPath.length - 1] !== \"/\") {\n          newPath = newPath + \"/\";\n        }\n\n        if (routes.includes(newPath)) {\n          this.setState({\n            errorMessage: \"\",\n            index: 0,\n            text: \"\"\n          });\n          if (newPath !== this.props.path) {\n            navigate(newPath);\n          }\n        } else {\n          this.setState({\n            errorMessage: \"cd: no such file or directory: \" + newPath,\n            index: 0,\n            text: \"\"\n          });\n        }\n        break;\n      case \"Escape\":\n        this.navRef.current.blur();\n        break;\n      default:\n        let index;\n        if (key.length === 1) {\n          index = this.state.index + 1;\n        } else if (key === \"Backspace\") {\n          index = this.state.index - 1;\n        } else if (key === \"Delete\") {\n          index = this.state.index;\n        } else {\n          break;\n        }\n        this.setState({\n          index: index,\n          text: this.updateStateText(this.state.text, this.state.index, key)\n        });\n    }\n  };\n\n  _toggleCaret = shouldRenderCaret => {\n    this.setState({ renderCaret: shouldRenderCaret });\n  };\n\n  updateStateText(text, index, letter) {\n    const prefix = text.slice(0, index);\n    const suffix = text.slice(index);\n\n    if (letter === \"Backspace\") {\n      return prefix.slice(0, -1) + suffix;\n    }\n    if (letter === \"Delete\") {\n      return prefix + suffix.slice(1);\n    }\n    return prefix + letter + suffix;\n  }\n\n  renderCaret(text, index) {\n    if (index === text.length) {\n      return (\n        <>\n          <pre>{text}</pre>\n          <pre className=\"navbar-caret\"> </pre>\n        </>\n      );\n    } else {\n      const textPrefix = text.slice(0, index);\n      const textAtIndex = text.charAt(index);\n      const textSuffix = text.slice(index + 1);\n\n      console.log(textPrefix, textAtIndex, textSuffix);\n      return (\n        <>\n          <pre>{textPrefix}</pre>\n          <pre className=\"navbar-caret\">{textAtIndex}</pre>\n          <pre>{textSuffix}</pre>\n        </>\n      );\n    }\n  }\n\n  render() {\n    const { errorMessage, text, index, renderCaret } = this.state;\n\n    const renderedText = renderCaret ? (\n      this.renderCaret(text, index)\n    ) : (\n      <pre>{text}</pre>\n    );\n    return (\n      <div className=\"navbar\">\n        <div\n          className=\"navbar-input\"\n          tabIndex={1}\n          ref={this.navRef}\n          onBlur={() => this._toggleCaret(false)}\n          onFocus={() => this._toggleCaret(true)}\n          onKeyDown={this._handleKeyDown}\n        >\n          <pre className=\"navbar-path\">{\"~\" + this.props.path}</pre>\n          <pre> $ cd </pre>\n          {renderedText}\n        </div>\n        {errorMessage !== \"\" && (\n          <div className=\"navbar-error-message\">\n            <pre>{errorMessage}</pre>\n          </div>\n        )}\n        <NavbarSuggestions path={this.props.path} />\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","/* @flow strict-local */\n\nimport Navbar from \"./components/Navbar\";\nimport React from \"react\";\nimport { Router } from \"@reach/router\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst Home = () => (\n  <div className=\"App\">\n    <Navbar path=\"/\" />\n    <header className=\"App-header\">Home page under construction</header>\n  </div>\n);\n\nconst OtherPath = () => (\n  <div className=\"App\">\n    <Navbar path=\"/other/\" />\n    <header className=\"App-header\">Other page under construction too</header>\n  </div>\n);\n\nfunction App() {\n  return (\n    <Router>\n      <Home path=\"/\" />\n      <OtherPath path=\"/other/\" />\n    </Router>\n  );\n}\n\nexport default App;\nexport const routes = [\"/\", \"/other/\"];\nexport const routeHierarchy = {\n  \"/\": {\n    name: \"home\",\n    parent: null,\n    children: [\"/other/\"]\n  },\n  \"/other/\": {\n    name: \"other\",\n    parent: \"/\",\n    children: []\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}